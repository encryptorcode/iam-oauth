package io.github.encryptorcode.storage;

import io.github.encryptorcode.entity.ASession;
import io.github.encryptorcode.entity.AUser;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

/**
 * Abstract session handler implementation for handling session operations
 * @param <Session> {@link ASession} template
 * @param <User> {@link AUser} template
 */
public abstract class ASessionHandler<Session extends ASession, User extends AUser> {

    /**
     * used to generate a uniquely random number.
     */
    private static final SecureRandom random;
    /**
     * used for converting unique bytes to a hash to
     * abstract away the source of the unique random number.
     */
    private static final MessageDigest digest;
    /**
     * used to translate generated bytes to base64 for
     * the ability of using it as browser cookies.
     */
    private static final Base64.Encoder encoder;

    static {
        try {
            random = SecureRandom.getInstanceStrong();
            digest = MessageDigest.getInstance("SHA-1");
            encoder = Base64.getEncoder();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Failed to initialize Session service securely", e);
        }
    }

    /**
     * Generates a uniquely random identifier for the session.
     *
     * @param user user details
     * @return unique string for using as identifier for session
     */
    public String generateIdentifier(User user) {
        String userId = user.getId();
        String sessionId = randomString();
        return String.format("%s-%s", userId, sessionId);
    }

    /**
     * Used to customize session expiry time.
     *
     * @param user user details
     * @return time in seconds
     */
    public int getSessionExpiration(User user) {
        return 60 * 60 * 24 * 10; // default is 10 days
    }

    /**
     * Since framework uses an abstract {@link ASession} class,
     * this method will help this framework to construct a session object.
     *
     * @return an empty(default) session object
     */
    public abstract Session constructSession();

    /**
     * Get session details based on session identifier
     *
     * @param identifier identifier of the session
     * @return session object with possibly all details or
     * null if session doesn't exists or is expired
     */
    public abstract Session getSession(String identifier);

    /**
     * Creates a session for the user
     *
     * @param session session with details of the user
     * @return session object, with updated details if any
     */
    public abstract Session createSession(Session session);

    /**
     * Delete session using session identifier
     *
     * @param identifier identifier of the session
     */
    public abstract void deleteSession(String identifier);

    /**
     * A method to generate a unique and secure random string
     *
     * @return a random string
     */
    private static String randomString() {
        byte[] bytes = new byte[16];
        random.nextBytes(bytes);
        bytes = digest.digest(bytes);
        return encoder.encodeToString(bytes);
    }
}
